package Annotations;
/*
Что такое Java Аннотации?
Java Аннотации - это специальный тип комментариев в вашем коде с помощью которых можно:
- Передавать какие-либо инструкции для Java компилятора
- Передавать какие-либо инструкции для анализаторов исходного кода
(пример: инструменты, которые генерируют документацию из исходного кода)
- Передавать метаданные, которые могут быть использованы либо вашим Java приложением
(с помощью рефлексии), либо другими приложениями или фреймворками (пример: SpringFramework)
-------------------------------------------------------------------------------------------

Что такое метаданные?
- Данные о данных
- Не влияют на непосредственную работу программы, но могут быть выявлены
другими программами на этапе компилирования или разработки, которые
при этом скорректируют свою работу

Примеры:
- Тег <meta> в HTML, который используется для хранения информации
о странице, предназначенной для браузеров и поисковых систем
(ключевые слова, например)

- Аннотации в Java, которые дают дополнительную информцию о коде
------------------------------------------------------------------------

Java Аннотации
- Могут быть аннотированы класс, метод, параметр, поле, конструктор и многое другое
- В Java уже есть встроенные аннотации, которые аще всего используются
(@Override, @Deprecated, @SuppressWarnings)
- Можно создать свои аннотации (будет рассмотрено на следующем уроке)
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

Зачем создавать свои аннотации?
Это не так часто пригождается, но знать это полезно

- Если вы реализуете анализатор исходного кода, вы можете создать свои аннотации,
чтобы их можно было использовать в коде и тем самым передавать дополнительную
информацию об этом коде (те самые метаданные)

- Если вы реализуете свою библиотеку или фреймворк, вы можете создать
свои аннотации, чтобы пользователь с помощью них взаимодействовал с
вашей библиотекой или фреймворком.
(пример: Spring Framework)
В этом сценарии активно используется рефлексия.
-----------------------------------------------------------------------------

Создание и использование аннотаций
Создание (самая простая):
public @interface MyAnnotation {
}
Использование:
@MyAnnotation
public class TestMain {
}
--------------------------------------------------------

Поля (элементы) аннотаций
Объявляются как методы:
public @interface Author {
    String name();
    int dateOfBirth();
}
Но используются как поля:
@Author(name = "Stephen King", dateOfBirth = 1947)
public class TestMain {
}
-------------------------------------------------------

Значения по умолчанию
public @interface Author {
    String name() default "Some name";
    int dateOfBirth() default 2000;
}
Если не указываем значение для поля, оно примет значение по умолчанию
@Author()
public class TestMain {
}
----------------------------------------------------------------------

Аннотации аннотирующие аннотации
Лежат в java.lang.annotation
- @Target - указывает, к чему может быть применена аннотация. Значения
берутся из перечисления (enum) ElementType (из того же пакета)
FIELD - поле
METHOD - метод
TYPE - класс, интерфейс, перечисление
- @Retention - политика удержания аннотации (до какого этапа
компилирования или выполнения аннотация видна). Значения лежат в
перечислении RetentionPolicy:
SOURCE - отбрасываются при компиляции. Видны только в самом
исходном коде (подойдет для анализаторов исходного кода, например)
CLASS - сохраняются в байт-коде, но недоступны во время работы программы
RUNTIME - сохраняются в байт-коде и доступны во время работы программы
(с помощью рефлексии)
 */
